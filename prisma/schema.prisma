// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "metrics", "typedSql"]
  binaryTargets   = ["linux-arm64-openssl-1.1.x", "linux-arm64-openssl-3.0.x", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "native", "darwin", "darwin-arm64", "windows"]
  engineType      = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  createdAt DateTime @default(now())
  email     String?  @unique
  username  String?  @unique
  password  String

  isEmailConfirmed Boolean @default(false)
  emailCode        String  @default("")

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  userOrganizations UserOrganization[]
  userProjects      UserProject[]
}

enum RoleLevel {
  System
  Organization
  Project
}

model Role {
  id        String    @id
  createdAt DateTime  @default(now())
  name      String
  level     RoleLevel
  isCustom  Boolean   @default(false)

  userOrganizations UserOrganization[]
  userProjects      UserProject[]
  permissions       Permission[]
  users             User[]
}

model Permission {
  id        String   @id
  createdAt DateTime @default(now())

  action    String
  subject   String
  condition Json?

  roles Role[]
}

model Organization {
  id        String    @id
  createdId String    @unique
  projects  Project[]

  userOrganizations UserOrganization[]
}

model UserOrganization {
  id        String   @id
  createdAt DateTime @default(now())

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@unique([organizationId, userId])
}

model Project {
  id        String   @id
  createdAt DateTime @default(now())
  name      String
  isPublic  Boolean  @default(false)

  branches       Branch[]
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  userProjects   UserProject[]

  @@unique([organizationId, name])
}

model UserProject {
  id        String   @id
  createdAt DateTime @default(now())

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@unique([projectId, userId])
}

model Branch {
  id        String     @id
  createdAt DateTime   @default(now())
  isRoot    Boolean    @default(false)
  name      String
  projectId String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  revisions Revision[]

  @@unique([name, projectId])
}

model Revision {
  id         String   @id
  sequence   Int      @unique @default(autoincrement())
  createdAt  DateTime @default(now())
  comment    String   @default("")
  isHead     Boolean  @default(false)
  isDraft    Boolean  @default(false)
  isStart    Boolean  @default(false)
  hasChanges Boolean  @default(false)

  branchId  String
  branch    Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Revision?  @relation("parentRevision", fields: [parentId], references: [id], onDelete: SetNull)
  children  Revision[] @relation("parentRevision")
  tables    Table[]
  endpoints Endpoint[]

  @@index([branchId])
}

enum EndpointType {
  GRAPHQL
  REST_API
}

model EndpointVersion {
  id       String       @id
  type     EndpointType
  version  Int          @default(1)
  endpoint Endpoint[]

  @@unique([type, version])
}

model Endpoint {
  id         String       @id
  createdAt  DateTime     @default(now())
  type       EndpointType
  revisionId String
  isDeleted  Boolean      @default(false)

  versionId String
  version   EndpointVersion @relation(fields: [versionId], references: [id])

  revision Revision @relation(fields: [revisionId], references: [id], onDelete: Cascade)

  @@unique([revisionId, type])
}

model Table {
  versionId String @id
  createdId String
  id        String

  readonly Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  system Boolean @default(false)

  revisions Revision[]
  rows      Row[]

  @@index([id])
}

model Row {
  versionId String @id
  createdId String
  id        String

  readonly Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  data       Json
  meta       Json   @default("{}")
  hash       String
  schemaHash String

  tables Table[]

  @@index([data], type: Gin)
  @@index([id])
  @@index([hash])
  @@index([schemaHash])
}
