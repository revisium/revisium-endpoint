input CustomGetUsersInput {
  after: String
  first: Int
  orderBy: [CustomGetUsersOrderByInput!]
  where: CustomUsersWhereInput
}

enum CustomGetUsersOrderByField {
  createdAt
  id
  publishedAt
  updatedAt
}

input CustomGetUsersOrderByInput {
  direction: ProjectSortOrder!
  field: CustomGetUsersOrderByField!
}

type CustomUser {
  address: CustomUserAddress!
  adult: Boolean!
  age: Float!
  array: [CustomUserArrayItemsItemsItems!]!
  firstName: String!
  imageIds: [String!]!
  lastName: String!
  posts: [CustomUserPostsItems!]!
}

type CustomUserAddress {
  city: String!
  nestedAddress: CustomUserAddressNestedaddress!
  zipCode: Float!
}

type CustomUserAddressNestedaddress {
  zipCode: String!
}

type CustomUserArrayItemsItemsItems {
  nested: String!
}

type CustomUserConnection {
  edges: [CustomUserEdge!]!
  pageInfo: ProjectPageInfo!
  totalCount: Int!
}

type CustomUserEdge {
  cursor: String!
  node: CustomUserNode!
}

type CustomUserFlat {
  address: CustomUserFlatAddress!
  adult: Boolean!
  age: Float!
  array: [CustomUserFlatArrayItemsItemsItems!]!
  firstName: String!
  imageIds: [String!]!
  lastName: String!
  posts: [CustomUserFlatPostsItems!]!
}

type CustomUserFlatAddress {
  city: String!
  nestedAddress: CustomUserFlatAddressNestedaddress!
  zipCode: Float!
}

type CustomUserFlatAddressNestedaddress {
  zipCode: String!
}

type CustomUserFlatArrayItemsItemsItems {
  nested: String!
}

type CustomUserFlatConnection {
  edges: [CustomUserFlatEdge!]!
  pageInfo: ProjectPageInfo!
  totalCount: Int!
}

type CustomUserFlatEdge {
  cursor: String!
  node: CustomUserFlat!
}

type CustomUserFlatPostsItems {
  id: String!
  title: String!
}

type CustomUserNode {
  createdAt: DateTime!
  createdId: String!
  data: CustomUser!
  id: String!
  json: JSON!
  publishedAt: DateTime!
  updatedAt: DateTime!
  versionId: String!
}

type CustomUserPostsItems {
  id: String!
  title: String!
}

input CustomUsersWhereInput {
  AND: [CustomUsersWhereInput!]
  NOT: [CustomUsersWhereInput!]
  OR: [CustomUsersWhereInput!]
  createdAt: ProjectDateTimeFilter
  createdId: ProjectStringFilter
  data: ProjectJsonFilter
  id: ProjectStringFilter
  publishedAt: ProjectDateTimeFilter
  readonly: ProjectBoolFilter
  updatedAt: ProjectDateTimeFilter
  versionId: ProjectStringFilter
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input ProjectBoolFilter {
  equals: Boolean
  not: Boolean
}

input ProjectDateTimeFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  notIn: [String!]
}

enum ProjectFilterJsonMode {
  default
  insensitive
}

enum ProjectFilterStringMode {
  default
  insensitive
}

input ProjectJsonFilter {
  array_contains: [JSON!]
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  mode: ProjectFilterJsonMode
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

type ProjectPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum ProjectSortOrder {
  asc
  desc
}

input ProjectStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: ProjectFilterStringMode
  not: String
  notIn: [String!]
  startsWith: String
}

type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
  user(id: String!): CustomUserNode!
  userFlat(id: String!): CustomUserFlat!
  users(data: CustomGetUsersInput): CustomUserConnection!
  usersFlat(data: CustomGetUsersInput): CustomUserFlatConnection!
}

scalar _Any

union _Entity = CustomUserNode

type _Service {
  """
  The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied
  """
  sdl: String
}