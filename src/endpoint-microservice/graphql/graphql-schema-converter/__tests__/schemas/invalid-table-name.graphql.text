scalar DataTime

scalar JSON

input ProjectBoolFilter {
  equals: Boolean
  not: Boolean
}

input ProjectDateTimeFilter {
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  notIn: [String]
}

input ProjectGetInvalid_table_name____usersInput {
  after: String
  first: Int
  orderBy: [ProjectGetInvalid_table_name____usersOrderByInput]
  where: ProjectInvalid_table_name____usersWhereInput
}

enum ProjectGetInvalid_table_name____usersOrderByField {
  createdAt
  id
  updatedAt
}

input ProjectGetInvalid_table_name____usersOrderByInput {
  direction: ProjectSortOrder!
  field: ProjectGetInvalid_table_name____usersOrderByField!
}

type ProjectInvalid_table_name____user {
  name: String!
}

type ProjectInvalid_table_name____userConnection {
  edges: [ProjectInvalid_table_name____userEdge!]!
  pageInfo: ProjectPageInfo!
  totalCount: Int!
}

type ProjectInvalid_table_name____userEdge {
  cursor: String!
  node: ProjectInvalid_table_name____userNode!
}

type ProjectInvalid_table_name____userFlat {
  name: String!
}

type ProjectInvalid_table_name____userFlatConnection {
  edges: [ProjectInvalid_table_name____userFlatEdge!]!
  pageInfo: ProjectPageInfo!
  totalCount: Int!
}

type ProjectInvalid_table_name____userFlatEdge {
  cursor: String!
  node: ProjectInvalid_table_name____userFlat!
}

type ProjectInvalid_table_name____userNode {
  createdAt: DataTime!
  createdId: String!
  data: ProjectInvalid_table_name____user!
  id: String!
  json: JSON
  updatedAt: DataTime!
  versionId: String!
}

input ProjectInvalid_table_name____usersWhereInput {
  AND: [ProjectInvalid_table_name____usersWhereInput!]
  NOT: [ProjectInvalid_table_name____usersWhereInput!]
  OR: [ProjectInvalid_table_name____usersWhereInput!]
  createdAt: ProjectDateTimeFilter
  createdId: ProjectStringFilter
  data: ProjectJsonFilter
  id: ProjectStringFilter
  readonly: ProjectBoolFilter
  updatedAt: ProjectDateTimeFilter
  versionId: ProjectStringFilter
}

input ProjectJsonFilter {
  array_contains: [String]
  array_ends_with: String
  array_starts_with: String
  equals: String
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  mode: String
  path: [String]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

type ProjectPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum ProjectSortOrder {
  asc
  desc
}

input ProjectStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: String
  not: String
  notIn: [String]
  startsWith: String
}

type Query {
  INVALID_TABLE_NAME____user(id: String!): ProjectInvalid_table_name____userNode!
  INVALID_TABLE_NAME____userFlat(id: String!): ProjectInvalid_table_name____userFlat!
  INVALID_TABLE_NAME____users(data: ProjectGetInvalid_table_name____usersInput): ProjectInvalid_table_name____userConnection!
  INVALID_TABLE_NAME____usersFlat(data: ProjectGetInvalid_table_name____usersInput): ProjectInvalid_table_name____userFlatConnection!
  _service: _Service
}

type _Service {
  sdl: String
}