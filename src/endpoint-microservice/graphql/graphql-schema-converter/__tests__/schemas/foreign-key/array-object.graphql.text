scalar DataTime

scalar JSON

input ProjectBoolFilter {
  equals: Boolean
  not: Boolean
}

input ProjectDateTimeFilter {
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  notIn: [String]
}

input ProjectGetPostsInput {
  after: String
  first: Int
  orderBy: [ProjectGetPostsOrderByInput]
  where: ProjectPostsWhereInput
}

enum ProjectGetPostsOrderByField {
  createdAt
  id
  updatedAt
}

input ProjectGetPostsOrderByInput {
  direction: ProjectSortOrder!
  field: ProjectGetPostsOrderByField!
}

input ProjectGetUsersInput {
  after: String
  first: Int
  orderBy: [ProjectGetUsersOrderByInput]
  where: ProjectUsersWhereInput
}

enum ProjectGetUsersOrderByField {
  createdAt
  id
  updatedAt
}

input ProjectGetUsersOrderByInput {
  direction: ProjectSortOrder!
  field: ProjectGetUsersOrderByField!
}

input ProjectJsonFilter {
  array_contains: [String]
  array_ends_with: String
  array_starts_with: String
  equals: String
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  mode: String
  path: [String]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

type ProjectPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type ProjectPost {
  name: String!
}

type ProjectPostConnection {
  edges: [ProjectPostEdge!]!
  pageInfo: ProjectPageInfo!
  totalCount: Int!
}

type ProjectPostEdge {
  cursor: String!
  node: ProjectPostNode!
}

type ProjectPostFlat {
  name: String!
}

type ProjectPostNode {
  createdAt: DataTime!
  createdId: String!
  data: ProjectPost!
  id: String!
  json: JSON
  updatedAt: DataTime!
  versionId: String!
}

input ProjectPostsWhereInput {
  AND: [ProjectPostsWhereInput!]
  NOT: [ProjectPostsWhereInput!]
  OR: [ProjectPostsWhereInput!]
  createdAt: ProjectDateTimeFilter
  createdId: ProjectStringFilter
  data: ProjectJsonFilter
  id: ProjectStringFilter
  readonly: ProjectBoolFilter
  updatedAt: ProjectDateTimeFilter
  versionId: ProjectStringFilter
}

enum ProjectSortOrder {
  asc
  desc
}

input ProjectStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: String
  not: String
  notIn: [String]
  startsWith: String
}

type ProjectUser {
  name: String!
  posts: [ProjectUserPostsItems!]!
}

type ProjectUserConnection {
  edges: [ProjectUserEdge!]!
  pageInfo: ProjectPageInfo!
  totalCount: Int!
}

type ProjectUserEdge {
  cursor: String!
  node: ProjectUserNode!
}

type ProjectUserFlat {
  name: String!
  posts: [ProjectUserFlatPostsItems!]!
}

type ProjectUserFlatPostsItems {
  postId: ProjectPostFlat!
  title: String!
}

type ProjectUserNode {
  createdAt: DataTime!
  createdId: String!
  data: ProjectUser!
  id: String!
  json: JSON
  updatedAt: DataTime!
  versionId: String!
}

type ProjectUserPostsItems {
  postId: ProjectPostNode!
  title: String!
}

input ProjectUsersWhereInput {
  AND: [ProjectUsersWhereInput!]
  NOT: [ProjectUsersWhereInput!]
  OR: [ProjectUsersWhereInput!]
  createdAt: ProjectDateTimeFilter
  createdId: ProjectStringFilter
  data: ProjectJsonFilter
  id: ProjectStringFilter
  readonly: ProjectBoolFilter
  updatedAt: ProjectDateTimeFilter
  versionId: ProjectStringFilter
}

type Query {
  _service: _Service
  post(id: String!): ProjectPostNode!
  postFlat(id: String!): ProjectPostFlat!
  posts(data: ProjectGetPostsInput): ProjectPostConnection!
  user(id: String!): ProjectUserNode!
  userFlat(id: String!): ProjectUserFlat!
  users(data: ProjectGetUsersInput): ProjectUserConnection!
}

type _Service {
  sdl: String
}