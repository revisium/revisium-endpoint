scalar DataTime

scalar JSON

input ProjectBoolFilter {
  equals: Boolean
  not: Boolean
}

input ProjectDateTimeFilter {
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  notIn: [String]
}

enum ProjectFilterStringMode {
  default
  insensitive
}

input ProjectGetUsERsInput {
  after: String
  first: Int
  orderBy: [ProjectGetUsERsOrderByInput]
  where: ProjectUsERsWhereInput
}

enum ProjectGetUsERsOrderByField {
  createdAt
  id
  publishedAt
  updatedAt
}

input ProjectGetUsERsOrderByInput {
  direction: ProjectSortOrder!
  field: ProjectGetUsERsOrderByField!
}

input ProjectGetuSersInput {
  after: String
  first: Int
  orderBy: [ProjectGetuSersOrderByInput]
  where: ProjectuSersWhereInput
}

enum ProjectGetuSersOrderByField {
  createdAt
  id
  publishedAt
  updatedAt
}

input ProjectGetuSersOrderByInput {
  direction: ProjectSortOrder!
  field: ProjectGetuSersOrderByField!
}

input ProjectJsonFilter {
  array_contains: [JSON]
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  mode: String
  path: [String]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

type ProjectPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum ProjectSortOrder {
  asc
  desc
}

input ProjectStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: ProjectFilterStringMode
  not: String
  notIn: [String]
  startsWith: String
}

type ProjectUsER {
  name: String!
}

type ProjectUsERConnection {
  edges: [ProjectUsEREdge!]!
  pageInfo: ProjectPageInfo!
  totalCount: Int!
}

type ProjectUsEREdge {
  cursor: String!
  node: ProjectUsERNode!
}

type ProjectUsERFlat {
  name: String!
}

type ProjectUsERFlatConnection {
  edges: [ProjectUsERFlatEdge!]!
  pageInfo: ProjectPageInfo!
  totalCount: Int!
}

type ProjectUsERFlatEdge {
  cursor: String!
  node: ProjectUsERFlat!
}

type ProjectUsERNode {
  createdAt: DataTime!
  createdId: String!
  data: ProjectUsER!
  id: String!
  json: JSON
  publishedAt: DataTime!
  updatedAt: DataTime!
  versionId: String!
}

input ProjectUsERsWhereInput {
  AND: [ProjectUsERsWhereInput!]
  NOT: [ProjectUsERsWhereInput!]
  OR: [ProjectUsERsWhereInput!]
  createdAt: ProjectDateTimeFilter
  createdId: ProjectStringFilter
  data: ProjectJsonFilter
  id: ProjectStringFilter
  publishedAt: ProjectDateTimeFilter
  readonly: ProjectBoolFilter
  updatedAt: ProjectDateTimeFilter
  versionId: ProjectStringFilter
}

type ProjectuSer {
  name: String!
}

type ProjectuSerConnection {
  edges: [ProjectuSerEdge!]!
  pageInfo: ProjectPageInfo!
  totalCount: Int!
}

type ProjectuSerEdge {
  cursor: String!
  node: ProjectuSerNode!
}

type ProjectuSerFlat {
  name: String!
}

type ProjectuSerFlatConnection {
  edges: [ProjectuSerFlatEdge!]!
  pageInfo: ProjectPageInfo!
  totalCount: Int!
}

type ProjectuSerFlatEdge {
  cursor: String!
  node: ProjectuSerFlat!
}

type ProjectuSerNode {
  createdAt: DataTime!
  createdId: String!
  data: ProjectuSer!
  id: String!
  json: JSON
  publishedAt: DataTime!
  updatedAt: DataTime!
  versionId: String!
}

input ProjectuSersWhereInput {
  AND: [ProjectuSersWhereInput!]
  NOT: [ProjectuSersWhereInput!]
  OR: [ProjectuSersWhereInput!]
  createdAt: ProjectDateTimeFilter
  createdId: ProjectStringFilter
  data: ProjectJsonFilter
  id: ProjectStringFilter
  publishedAt: ProjectDateTimeFilter
  readonly: ProjectBoolFilter
  updatedAt: ProjectDateTimeFilter
  versionId: ProjectStringFilter
}

type Query {
  UsER(id: String!): ProjectUsERNode!
  UsERFlat(id: String!): ProjectUsERFlat!
  UsERs(data: ProjectGetUsERsInput): ProjectUsERConnection!
  UsERsFlat(data: ProjectGetUsERsInput): ProjectUsERFlatConnection!
  _service: _Service
  uSer(id: String!): ProjectuSerNode!
  uSerFlat(id: String!): ProjectuSerFlat!
  uSers(data: ProjectGetuSersInput): ProjectuSerConnection!
  uSersFlat(data: ProjectGetuSersInput): ProjectuSerFlatConnection!
}

type _Service {
  sdl: String
}