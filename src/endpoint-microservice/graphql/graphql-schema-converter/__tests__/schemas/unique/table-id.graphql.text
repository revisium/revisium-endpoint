scalar DataTime

scalar JSON

input ProjectBoolFilter {
  equals: Boolean
  not: Boolean
}

input ProjectDateTimeFilter {
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  notIn: [String]
}

input ProjectGetUsERsInput {
  after: String
  first: Int
  orderBy: [ProjectGetUsERsOrderByInput]
  where: ProjectUsERsWhereInput
}

enum ProjectGetUsERsOrderByField {
  createdAt
  id
  updatedAt
}

input ProjectGetUsERsOrderByInput {
  direction: ProjectSortOrder!
  field: ProjectGetUsERsOrderByField!
}

input ProjectGetuSersInput {
  after: String
  first: Int
  orderBy: [ProjectGetuSersOrderByInput]
  where: ProjectuSersWhereInput
}

enum ProjectGetuSersOrderByField {
  createdAt
  id
  updatedAt
}

input ProjectGetuSersOrderByInput {
  direction: ProjectSortOrder!
  field: ProjectGetuSersOrderByField!
}

input ProjectJsonFilter {
  array_contains: [String]
  array_ends_with: String
  array_starts_with: String
  equals: String
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  mode: String
  path: [String]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

type ProjectPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum ProjectSortOrder {
  asc
  desc
}

input ProjectStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: String
  not: String
  notIn: [String]
  startsWith: String
}

type ProjectUsER {
  name: String!
}

type ProjectUsERConnection {
  edges: [ProjectUsEREdge!]!
  pageInfo: ProjectPageInfo!
  totalCount: Int!
}

type ProjectUsEREdge {
  cursor: String!
  node: ProjectUsERNode!
}

type ProjectUsERFlat {
  name: String!
}

type ProjectUsERNode {
  createdAt: DataTime!
  createdId: String!
  data: ProjectUsER!
  id: String!
  json: JSON
  updatedAt: DataTime!
  versionId: String!
}

input ProjectUsERsWhereInput {
  AND: [ProjectUsERsWhereInput!]
  NOT: [ProjectUsERsWhereInput!]
  OR: [ProjectUsERsWhereInput!]
  createdAt: ProjectDateTimeFilter
  createdId: ProjectStringFilter
  data: ProjectJsonFilter
  id: ProjectStringFilter
  readonly: ProjectBoolFilter
  updatedAt: ProjectDateTimeFilter
  versionId: ProjectStringFilter
}

type ProjectuSer {
  name: String!
}

type ProjectuSerConnection {
  edges: [ProjectuSerEdge!]!
  pageInfo: ProjectPageInfo!
  totalCount: Int!
}

type ProjectuSerEdge {
  cursor: String!
  node: ProjectuSerNode!
}

type ProjectuSerFlat {
  name: String!
}

type ProjectuSerNode {
  createdAt: DataTime!
  createdId: String!
  data: ProjectuSer!
  id: String!
  json: JSON
  updatedAt: DataTime!
  versionId: String!
}

input ProjectuSersWhereInput {
  AND: [ProjectuSersWhereInput!]
  NOT: [ProjectuSersWhereInput!]
  OR: [ProjectuSersWhereInput!]
  createdAt: ProjectDateTimeFilter
  createdId: ProjectStringFilter
  data: ProjectJsonFilter
  id: ProjectStringFilter
  readonly: ProjectBoolFilter
  updatedAt: ProjectDateTimeFilter
  versionId: ProjectStringFilter
}

type Query {
  UsER(id: String!): ProjectUsERNode!
  UsERFlat(id: String!): ProjectUsERFlat!
  UsERs(data: ProjectGetUsERsInput): ProjectUsERConnection!
  _service: _Service
  uSer(id: String!): ProjectuSerNode!
  uSerFlat(id: String!): ProjectuSerFlat!
  uSers(data: ProjectGetuSersInput): ProjectuSerConnection!
}

type _Service {
  sdl: String
}