"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input ProjectBoolFilter {
  equals: Boolean
  not: Boolean
}

input ProjectDateTimeFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  notIn: [String!]
}

enum ProjectFilterJsonMode {
  default
  insensitive
}

enum ProjectFilterStringMode {
  default
  insensitive
}

input ProjectGetUsERsInput {
  after: String
  first: Int
  orderBy: [ProjectGetUsERsOrderByInput!]
  where: ProjectUsERsWhereInput
}

enum ProjectGetUsERsOrderByField {
  createdAt
  id
  publishedAt
  updatedAt
}

input ProjectGetUsERsOrderByInput {
  direction: ProjectSortOrder!
  field: ProjectGetUsERsOrderByField!
}

input ProjectGetuSersInput {
  after: String
  first: Int
  orderBy: [ProjectGetuSersOrderByInput!]
  where: ProjectuSersWhereInput
}

enum ProjectGetuSersOrderByField {
  createdAt
  id
  publishedAt
  updatedAt
}

input ProjectGetuSersOrderByInput {
  direction: ProjectSortOrder!
  field: ProjectGetuSersOrderByField!
}

input ProjectJsonFilter {
  array_contains: [JSON!]
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  mode: ProjectFilterJsonMode
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

type ProjectPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum ProjectSortOrder {
  asc
  desc
}

input ProjectStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: ProjectFilterStringMode
  not: String
  notIn: [String!]
  startsWith: String
}

type ProjectUsER {
  name: String!
}

type ProjectUsERConnection {
  edges: [ProjectUsEREdge!]!
  pageInfo: ProjectPageInfo!
  totalCount: Int!
}

type ProjectUsEREdge {
  cursor: String!
  node: ProjectUsERNode!
}

type ProjectUsERFlat {
  name: String!
}

type ProjectUsERFlatConnection {
  edges: [ProjectUsERFlatEdge!]!
  pageInfo: ProjectPageInfo!
  totalCount: Int!
}

type ProjectUsERFlatEdge {
  cursor: String!
  node: ProjectUsERFlat!
}

type ProjectUsERNode {
  createdAt: DateTime!
  createdId: String!
  data: ProjectUsER!
  id: String!
  json: JSON!
  publishedAt: DateTime!
  updatedAt: DateTime!
  versionId: String!
}

input ProjectUsERsWhereInput {
  AND: [ProjectUsERsWhereInput!]
  NOT: [ProjectUsERsWhereInput!]
  OR: [ProjectUsERsWhereInput!]
  createdAt: ProjectDateTimeFilter
  createdId: ProjectStringFilter
  data: ProjectJsonFilter
  id: ProjectStringFilter
  publishedAt: ProjectDateTimeFilter
  readonly: ProjectBoolFilter
  updatedAt: ProjectDateTimeFilter
  versionId: ProjectStringFilter
}

type ProjectuSer {
  name: String!
}

type ProjectuSerConnection {
  edges: [ProjectuSerEdge!]!
  pageInfo: ProjectPageInfo!
  totalCount: Int!
}

type ProjectuSerEdge {
  cursor: String!
  node: ProjectuSerNode!
}

type ProjectuSerFlat {
  name: String!
}

type ProjectuSerFlatConnection {
  edges: [ProjectuSerFlatEdge!]!
  pageInfo: ProjectPageInfo!
  totalCount: Int!
}

type ProjectuSerFlatEdge {
  cursor: String!
  node: ProjectuSerFlat!
}

type ProjectuSerNode {
  createdAt: DateTime!
  createdId: String!
  data: ProjectuSer!
  id: String!
  json: JSON!
  publishedAt: DateTime!
  updatedAt: DateTime!
  versionId: String!
}

input ProjectuSersWhereInput {
  AND: [ProjectuSersWhereInput!]
  NOT: [ProjectuSersWhereInput!]
  OR: [ProjectuSersWhereInput!]
  createdAt: ProjectDateTimeFilter
  createdId: ProjectStringFilter
  data: ProjectJsonFilter
  id: ProjectStringFilter
  publishedAt: ProjectDateTimeFilter
  readonly: ProjectBoolFilter
  updatedAt: ProjectDateTimeFilter
  versionId: ProjectStringFilter
}

type Query {
  UsER(id: String!): ProjectUsERNode!
  UsERFlat(id: String!): ProjectUsERFlat!
  UsERs(data: ProjectGetUsERsInput): ProjectUsERConnection!
  UsERsFlat(data: ProjectGetUsERsInput): ProjectUsERFlatConnection!
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
  uSer(id: String!): ProjectuSerNode!
  uSerFlat(id: String!): ProjectuSerFlat!
  uSers(data: ProjectGetuSersInput): ProjectuSerConnection!
  uSersFlat(data: ProjectGetuSersInput): ProjectuSerFlatConnection!
}

scalar _Any

union _Entity = ProjectUsERNode | ProjectuSerNode

type _Service {
  """
  The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied
  """
  sdl: String
}