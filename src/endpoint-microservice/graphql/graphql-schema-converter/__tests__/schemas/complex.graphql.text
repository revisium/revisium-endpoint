scalar DataTime

type Datauser {
  address: Datauser_address!
  adult: Boolean!
  age: Float!
  firstName: String!
  imageIds: [String!]!
  lastName: String!
  posts: [Datauser_posts_Items!]!
}

type Datauser_address {
  city: String!
  nestedAddress: Datauser_address_nestedAddress!
  zipCode: Float!
}

type Datauser_address_nestedAddress {
  zipCode: String!
}

type Datauser_posts_Items {
  id: String!
  title: String!
}

input GetuserInput {
  after: String
  first: Float
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  _service: _Service
  user(data: GetuserInput): userConnection!
}

type _Service {
  sdl: String
}

type user {
  createdAt: DataTime!
  data: Datauser!
  id: String!
  versionId: String!
}

type userConnection {
  edges: [userEdge!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

type userEdge {
  cursor: String!
  node: user!
}